version: "3.7"
name: yap_ls
services:
  db:
    container_name: db
    hostname: db
    image: postgres:14.4
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_data.sql:/docker-entrypoint-initdb.d/init_data.sql
      - ./create_schema.sql:/docker-entrypoint-initdb.d/create_schema.sql

  adminpanel:
    container_name: ls_admin
    hostname: ls_admin
    env_file:
      - .env
    build:
      context: ./adminpanel
    volumes:
      - django_static:/app/static
    command: >
      bash -c " 
       poetry run python manage.py migrate \ 
       poetry run python -m gunicorn panel.wsgi:application"
    expose:
      - "8000"
    depends_on:
      - db

  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    expose:
      - "8000"
    env_file:
      - .env
    depends_on:
      - db

  nginx:
    container_name: ls_admin_nginx
    hostname: ls_admin_nginx
    image: nginx:1.21.6
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - django_static:/static
    ports:
      - 80:80
    depends_on:
      - adminpanel

  redis:
    image: redis:6.2-alpine
    command: redis-server --save 20 1

  flask:
    build:
      context: ./code_generator
      dockerfile: Dockerfile
    expose:
      - '5000'
    env_file:
      - .env
    command: "gunicorn main_flask:app -b 0.0.0.0:5000 --reload"
    depends_on:
      - redis
      - db
    volumes:
      - download:/app/download

  celery:
    build:
      context: ./code_generator
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    command: "celery -A main_flask.celery worker --loglevel=info"
    depends_on:
      - redis
      - db
    volumes:
      - download:/app/download

volumes:
  django_static:
  postgres_data:
  download: